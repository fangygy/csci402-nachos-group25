Title: Writeup for Project 2, Spring 2011
Date: 02/27/11
Group Num 25:
	Antonio Cade		antonioc@usc.edu		7162757897
	Jasper Lee			jasperkl@usc.edu		3483925510
	Yinlerthai Chan		yinlertc@usc.edu		4550945929

I. Requirements:

	- Modify the Nachos code to support multiprogramming.
	- Implement system calls and exception handling.
	- Use this new system to simulate the passport office done in Project 1
	
II. Assumptions:
		We hoped that everything would go as planned. After designing our code and test cases, we
	hoped our implementations would go smoothly without too many severe problems that would
	cause any major setbacks. We worked slowly and took every class and function one step at a time.
	We did have expectations that things would be rough near the middle of the project phase
	as we encountered road bumps with understanding out assignment and the syntax we need to know
	to accomplish them. We might have had some doubts whether or not we would be able to submit this project
	within the deadline, and assumed using another slipdate as we stumbled with the 
	implementation of the Fork, Exec, and Exit syscalls since it involved utilizing stacks and
	page allocations where we had little experience.

III. Design:

	- exception.cc
	- process.cc/h
	- syscall.h
	- addrspace.cc/h

IV. Implementation:

	+ Files Modified
		+ addrspace.h, addrspace.cc
		+ exception.cc
		+ syscall.h
		+ system.h, system.cc
		+ Makefile.common
		+ Makefile (in test directory)
		+ machine.h
	
	+ Files added
		+ process.h, process.cc
		+ lockTest.c, CVTest.c, forkTest.c, execTest.c, execCVTest.c
	
	+ Data Structures added
		-- in file process.h
		struct Process {
			AddrSpace* space;			// The address space of this process
			char* name;					// A name for debugging
			SpaceId processId;			// SpaceId of location in processTable
			int numThreads;				// Number of threads in this process
		};
		-- in file exception.cc
		struct KernelLock {
			Lock* lock;					// The lock this KernelLock references
			AddrSpace* space;			// The space the lock is associated with
			bool beingAcquired;			// Prevents deletion while being acquired
			bool isToBeDeleted;			// Used to delete lock after thread releases it
			bool deleted;				// Used to verify status of lock
			
			KernelLock() {
				lock = NULL;
				beingAcquired = false;
				space = NULL;
				isToBeDeleted = false;
				deleted = true;
			}
		};

		struct KernelCondition {
			Condition* condition;		// Condition this KernelCondition refers to
			AddrSpace* space;			// The space associated with this condition
			bool beingAcquired;			// Prevents deletion while waiting
			bool isToBeDeleted;			// Used to delete after waking up from a wait
			bool deleted;				// Used to verify status of lock
			
			KernelCondition() {
				condition = NULL;
				beingAcquired = false;
				space = NULL;
				isToBeDeleted = false;
				deleted = true;
			}
		};
	+ Data Structures created
		-- Syscalls in exception.cc
		-- AllocateStack(unsigned int vaddr), DeallocateStack, DeallocateProcess
			- For allocating more stack space or deallocating space
V. Testing:

	+ How to test
		Compile tests with gmake in the test directory.
		If haven't done so beforehand, gmake programs in userprog directory.
		To run tests, you must call them in the userprog directory.

		To run lockTest, type:
		nachos -x ../test/lockTest

		To run execTest or forkTest, type:
		nachos -x ../test/execTest

		To run execCVTest or CVTest, type:
		nachos -x ../test/execCVTest
		
		To run execDestroyCVTest or destroyCVTest, type:
		nachos -x ../test/execDestroyCVTest
		
		To run randTest, type:
		nachos -x ../test/randTest
		
		To run traceTest, type:
		nachos -x ../test/traceTest
		
		To run passport tests, type:
		nachos -x ../test/execPassportTests

	+ Test Output
		All our tests output expected results. For more a more in-depth discussion
		of our test cases, you can reference the TEST_WRITEUP in the test directory.

		- Our most basic test, execTest, tests both good and bad usage of the Exec syscall. 
		Calling a bad file name or anything other than a proper program will output an 
		error message but will not crash Nachos. It will then continue on to call Exec on 
		the second test, forkTest, which tests our Fork syscall. execTest properly executes 
		forkTest, thus we know Exec works. 
		- forkTest tests our Fork functionality by calling Fork on a test function that simply
		prints out a statement to show it works. forkTest calls Fork twice, so we expected 
		two output statements from the function, which it did. Afterwards, it would call
		Fork using bad inputs, which printed out the errors that we expected while not crashing the system.
		- lockTest and CVTest (the latter of which executes with execCVTest) both test the
		functionality of all our Lock and Condition Variable related syscalls, including Acquire,
		Release, Wait, Signal, and Broadcast, along with thier respective Create and Destroy syscalls.
		The test cases utilize simple functions to test the order of execution using
		the functions Wait, Signal, and Broadcast along with the usage of Acquire and Release. 
		All tests output expected results without crashing Nachos unexpectedly.
		- destroyCVTest tests the functionality of locks and CVs that have been destroyed and the threads that
		still need those locks/CVs. 2 "Waiter" threads and one "Troll" threads are forked off, and they wait on a CV.
		A "Signaller" thread broadcasts to awaken them and waits on a new CV. The Troll deletes a lock that
		Waiter 1 will need, and deletes the CV that the Signaller needs to wake up; it then signals the Signaller's new CV.
		Waiter 1 will simple exit after failing to acquire the lock it wanted, and the Signaller wakes up properly. It then
		tries to wait on the same CV, but it cannot because it has been destroyed.

		- All passport tests show that when there are no customers in the simulation (either never entered, or all have left
		the office), then the program exits normally.
		- passportTest1 tests two Customers only, to make sure no two Customers get in the same line at the same time.
		Customers get in line depending on the shortest line, but will always get in line one at a time
		This test also shows how the regular and privileged lines are managed:
		That customers are "smart" enough to go into regular lines if both regular and privileged lines are equal lengths,
		whether they have enough money for it or not, and otherwise will always pick the shortest line if they have the
		funds for it. If the customer has no funds, then the customer will compare regular lines only.
		- passportTest2 tests the Manager and reading money from each Clerk. The Manager will read
		one Clerk's money total at a time, and add that total to his calculated sum.
		This test also tests that the Clerks all go on break when there are no customers,
		as there are never any customers, thus no customers in thier lines.
		- passport3 tests a regular passport runthrough with 5 customers and one of each clerk type. 
		At the end, it is shown clearly that Customers do not leave the office until they receive thier passport from the cashier,
		and the one cashier will not begin the next customer until the first one finishes leaving the office.
		This test also shows that total sales never suffer from a race condition, as the funds correspond to
		the amount of cash the customers give to the clerks. It can also count as another test to show that
		the clerks all go on break when they are done with all the customers in thier line.
		Additionally, this test also demonstrates that the Manager calls back Clerks from break when there are too many
		customers in their line (as seen near the middle of the output block).

VI. Discussion:
		We expected that bulletproofing out syscalls wouldn't be too difficult through the use of locks and error handling.
		Our safeguards are very thorough, however we ran into a problem with syscalls that take in virtual addresses. We were not
		able to implement a way of checking that the input vitrual address was within valid bounds. Other than that, out syscall
		implementation went about as smoothly as we expected.

		All of our syscalls, along with our passport office, run proplerly and synchronously (aside from the aforementioned problem
		with bad input virtual addresses). We are able to run multiple passport offices, with and without random context switching.
		
VII. Miscellaneous:
