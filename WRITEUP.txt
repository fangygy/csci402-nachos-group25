I. Requirements:

	- Describe what's your understanding of the requirements from the assignment statement. 
	  With the requirement analysis, you would be clear about what you are supposed to do.
	- Build a synchronized, multi-threaded system #SARCASM
	
II. Assumptions:

	- Reasonable assumptions you take for your scheme.

III. Design:

	- This section is to cover your logic and ideas as to how 
	you are going to solve the problem presented. 
	This should include a description of classes, algorithms, etc.
	
	- Customer
		- Local variables include a unique identifier (SSN), cash on hand (randomly chosen increments of
			$100, $600, $1100, $1600), and four boolean flags
			- Each flag keeps track of which clerk the customer has visited: ApplicationClerk, PictureClerk,
				PassportClerk, and Cashier
			- WHILE any flag is false, stay inside this loop
		- There is a random chance to go to passport line before the application and picture clerks
			- This only happens once
			- Customer will be punished upon being rejected, waiting a certain number of 
				currentThread->Yield calls
		- Visits clerks in order of ApplicationClerk == PictureClerk > PassportClerk > Cashier
			- If customer has enough money, will always enter the privileged line UNLESS
				both regular and privileged lines are empty. Gotta save money, right?
			- When choosing between ApplicationClerk and PictureClerk, chooses whichever has the
				shortest line, taking into account privileged and empty lines. If both lines are tied
				or empty, then go to ApplicationClerk.
		- Checks for Senators in three different situations:
			- Before entering the office, if senators are present, go directly into the
				Waiting Room.
			- Between entering lines for different clerks, if senators are present, go 
				directly to the Waiting Room.
			- While in line, if senators are present, go directly to the Waiting Room, but remember
				that customer was in which line.
	- Senator
		- Senators do not actively start lining up until the Passport Office is cleared of
			all regular customers (can't be in the same room as riff-raffs, eh)
			- Waits for the Manager to alert them that all customers have gone into the 
				Waiting Room
		- Otherwise, behaves exactly the same as customers when dealing with each different type
			of clerk
		- After all senators are finished, the Manager alerts all Customers to continue doing
			whatever they were already doing
	- AppClerk
		- Keeps track of the customer's SSN (also the index) and type (customer or senator)
		- While this thread is running
			- check to see if the privileged line has customers first, then check the regular line
			- when checking each line:
				- decrease the line length
				- set itself to available
				- Signal the customer to let it know the clerk is ready
				- then wait for the customer's response
				- Once the customer responds, read the SSN from the data array
				- check the customer type
				- Set the customer's state to reflect the Application phase DONE
				- Process the application, then signal the customer and release it
			- If no customers in either line, go on break
				- Wake up when Manager sees that there are customers in line
	- PicClerk
		- Keeps track of the customer's SSN (also the index) and type (customer or senator)
		- While this thread is running
			- check to see if the privileged line has customers first, then check the regular line
			- when checking each line:
				- decrease the line length
				- set itself to available
				- Signal the customer to let it know the clerk is ready
				- then wait for the customer's response
				- Once the customer responds, read the SSN from the data array
				- check the customer type
				- Then proceed to take the customer's picture
					- will loop as long as the picture is disliked by the customer
					- There is a bool in the picture clerk data array for the customer to let
					- him know if the picture is liked or not
					- Will loop out once the picture is liked, and the pic clerk will continue to process
				- Set the customer's state to reflect the Picture phase DONE
				- Process the picture then signal the customer and release it
			- If no customers in either line, go on break
				- Wake up when Manager sees that there are customers in line
	- PassClerk
		- Keep track of the SSN and type of the current customer
		- WHILE this thread is running
			- check to see if the privileged line has customers first, then check the regular line
			- when checking each line:
				- decrease the line length
				- set itself to available
				- Signal the customer to let it know the clerk is ready
				- set state to BUSY
				- Signal the first customer and wait for them
				
				- record their SSN and type
				- if customer has filed their application and taken their picture
					- make a note to do their passport
					- Signal the customer
				- else
					- punish and signal the customer
				- If I'm supposed to file the passport
					- Yield (to simulate doing work)
					- file the passport
			- If no customers in either line, go on break
				- Wake up when Manager sees that there are customers in line
	- Cashier
	- Manager
		- keeps track of the total money made by the office
		- while this thread is running
			- constantly check all clerk lines for customers
			- if customers exist, depending on the number, wake up either
			- one clerk or all clerks for that line
			- also checks for senators and broadcasts to everyone 
			- if a senator is there
			- will also print out a money report that includes
			- the office's total money as well as each clerk's money

IV. Implementation:

	+ Files Modified
	+ synch.h, synch.cc
	
	+ Files added
	+ officeMonitor.h, officeMonitor.cc
	+ office.cc
	
	+ Data Structures added, and the file they were added to.
		-- in file threads.cc/threads.h
		class Lock
 		{
			public:
				
			private:
				bool  free; 
				Thread* holder;			// holder of this lock
				List *queue; 
		}
		
		-- in file office.cc
		-- CUSTOMER/SENATOR HELPER FUNCTIONS
		int doRandomCash ()
		void checkSenator ()
		void senLineCashier (int& myCash, int& SSN, bool& visitedCash)
		void lineCashier (int& myCash, int& SSN, bool& visitedCash)
		void talkPassClerk (int& SSN, bool& visitedPass, bool inPrivLine)
		void talkAppClerk (int& SSN, bool& visitedApp, bool inPrivLine)
		void talkPicClerk (int& SSN, bool& visitedPic, bool inPrivLine)
		void lineAppPicClerk (int& myCash, int& SSN, bool& visitedApp, bool& visitedPic)
		void linePassClerk (int& myCash, int& SSN, bool& visitedPass)
		void senLineAppPicClerk (int& myCash, int& SSN, bool& visitedApp, bool& visitedPic) 
		void senLinePassClerk (int& myCash, int& SSN, bool& visitedPass)
		
		-- THREAD FUNCTIONS
		void AppClerk (int index)
		void PicClerk (int index)
		void PassClerk (int index)
		void Cashier (int index)
		void Manager ()
		
	+ Data Structures modified, and the file they were added to.
		- For example,
			class Lock                -- in file threads.cc/threads.h
			{
				public:
					
				private:
					bool  free; 
					Thread* holder;			// holder of this lock
					List *queue; 
			}
			
            + Functions added and in which file.

            + Functions modified and in which file.

V. Testing:  (For each test case, you must show)
	+ How to test

- How to run the test cases, the commands, the arguments and so on.
	+ Test Output

- Describe the testing output. You don't have to dump all the output info. Just make sure your description can exactly reflect your output.

VI. Discussion:
	+ Experiment expectation.  (What you hope will happen.)
	+ Experiment result.  (What actually happens.)
	+ Explanation
		- Explain your experiment result.

VII. Miscellaneous:

- Whatever else you want the grader know about your development.  You can create your own subsections headings here.