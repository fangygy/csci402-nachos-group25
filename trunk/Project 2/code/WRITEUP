Title: Writeup for Project 2, Spring 2011
Date: 02/27/11
Group Num 25:
	Antonio Cade		antonioc@usc.edu		7162757897
	Jasper Lee			jasperkl@usc.edu		3483925510
	Yinlerthai Chan		yinlertc@usc.edu		4550945929

I. Requirements:

	- Modify the Nachos code to support multiprogramming.
	- Implement system calls and exception handling.
	- Use this new system to simulate the passport office done in Project 1
	
II. Assumptions:
		We hoped that everything would go as planned. After designing our code and test cases, we
	hoped our implementations would go smoothly without too many severe problems that would
	cause any major setbacks. We worked slowly snd took every class and function one step at a time.
	We did have expectations that things would be rough near the middle of the project phase
	as we encountered road bumps with understanding out assignment and the syntax we need to know
	to accomplish them. We might have had some doubts whether or not we would be able to submit this project
	within the deadline, and assumed using another slipdate as we stumbled with the 
	implementation of the Fork, Exec, and Exit syscalls since it involved utilizing stacks and
	page allocations where we had little experience.

III. Design:

	- exception.cc
	- process.cc/h
	- syscall.h
	- addrspace.cc/h

IV. Implementation:

	+ Files Modified
		+ addrspace.h, addrspace.cc
		+ exception.cc
		+ syscall.h
		+ Makefile.common
		+ Makefile (in test directory)
	
	+ Files added
		+ process.h, process.cc
		+ lockTest.c, CVTest.c, forkTest.c, execTest.c, execCVTest.c
	
	+ Data Structures added
		-- in blah class.cc
		
	+ Data Structures created
		-- in blah blah .cc

V. Testing:

	+ How to test
		Compile tests with gmake in the test directory.
		If haven't done so beforehand, gmake programs in userprog directory.
		To run tests, you must call them in the userprog directory.

		To run lockTest, type:
		nachos -x ../test/lockTest

		To run execTest or forkTest, type:
		nachos -x ../test/execTest

		To run execCVTest or CVTest, type:
		nachos -x ../test/execCVTest

		To run passport tests, type:
		nachos -x ../test/execPassportTests

	+ Test Output
		All our tests output expected results. For more a more in-depth discussion
		of our test cases, you can reference the TEST_WRITEUP in the test directory.

		- Our most basic test, execTest, tests both good and bad usage of the Exec syscall. 
		Calling a bad file name or anything other than a proper program will output an 
		error message but will not crash Nachos. It will then continue on to call Exec on 
		the second test, forkTest, which tests our Fork syscall. execTest properly executes 
		forkTest, thus we know Exec works. 
		- forkTest tests our Fork functionality by calling Fork on a test function that simply
		prints out a statement to show it works. forkTest calls Fork twice, so we expected 
		two output statements from the function, which it did. Afterwards, it would call
		Fork using bad inputs, which printed out the errors that we expected while not crashing the system.
		- lockTest and CVTest (the latter of which executes with execCVTest) both test the
		functionality of all our Lock and Condition Variable related syscalls, including Acquire,
		Release, Wait, Signal, and Broadcast, along with thier respective Create and Destroy syscalls.
		The test cases utilize simple functions to test the order of execution using
		the functions Wait, Signal, and Broadcast along with the usage of Acquire and Release. 
		All tests output expected results without crashing Nachos unexpectedly.

		- passportTest1 tests two Customers only, to make sure no two Customers get in the same line at the same time.
		Customers get in line depending on the shortest line, but will always get in line one at a time
		- passportTest2 tests the Manager and reading money from each Clerk. The Manager will read
		one Clerk's money total at a time, and add that total to his calculated sum.

VI. Discussion:
	+ Experiment expectation


	+ Experiment result
		// What do you think guys?

	+ Explanation
		// explain our experiment result

VII. Miscellaneous:
