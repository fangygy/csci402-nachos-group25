Title: Writeup for Project 4, Spring 2011
Date: 04/26/11
Group Num 25:
	Antonio Cade		antonioc@usc.edu		7162757897
	Jasper Lee			jasperkl@usc.edu		3483925510
	Yinlerthai Chan		yinlertc@usc.edu		4550945929

I. Requirements:

	- Modify Nachos functionality to support server functionality (one server with passport office)
	- Implement distributed server functionality
	
II. Assumptions:
	
		With the design already laid out before us, provided in class, we had hoped that this project 
	would be fairly simple. Also, because of our disastrous Project 3, we decided to revert to
	Project 2 code, with increased NumPhysPages to 4096. Implementing the passport office across multiple clients linked to a single
	server should fairly smoothly done, although an overhaul on syscalls was necessary. Distributed servers
	seemed like it should be simple, but two days into the slipdate and we still cannot solve the problems
	that are occuring. Overall, the latter half of the project did not go as planned.

III. Design:

	- exception.cc
	- nettest.cc

IV. Implementation:

	+ Files Modified
		+ exception.cc
		+ syscall.h
		+ system.h, system.cc
		+ Makefile (in test directory)
		+ machine.h
		+ nettest.cc
	
	+ Files added
		+ Customer.c, AppClerk.c, PicClerk.c, PassClerk.c, CashClerk.c, Senator.c, Manager.c
		+ SimpleServerPassport.c, 10Customers.c, 5AppPicClerks.c, 5PassCashClerks.c, 1ManagerSenators.c
	
	+ Data Structures added
		-- in file nettest.cc
		struct Holder {			// Struct that holds a machineID and mailboxID
			int machineID;
			int mailboxID;
		};
		
		struct InnerLock {		// Lock struct that holds the info for acquisition and release
			bool exists;
			Holder holder;
			List *queue;
			List *machineIDQueue;
			List *mailboxIDQueue;
			Holder clientID[MAX_CLIENTS];
			int numClients;
		};

		struct ServerLock {		// Server lock that holds an array of InnerLocks, for locks with the same name
			char* name;
			bool exists;
			InnerLock lock[ARRAY_MAX];
		};

		struct InnerCV {		// CV struct that holds the info for condition usage
			bool exists;
			int waitingOuterLock;
			int waitingInnerLock;
			List* queue;
			List *machineIDQueue;
			List *mailboxIDQueue;
			Holder clientID[MAX_CLIENTS];
			int numClients;
		};

		struct ServerCV {		// Server CV that holds an array of InnerCVs, that share a name
			char* name;
			bool exists;
			InnerCV cv[ARRAY_MAX];
		};

		struct ServerMV {		// Server MV that holds an array of values, for MVs that share a name
			char* name;
			int value[ARRAY_MAX];
		};
		
		struct Message {		// Message struct for holding messages that have yet to be parsed
			int clientMachineID;
			int clientMailboxID;
			unsigned int timestamp;
			char* message;
			bool sender;
		};
	+ Data Structures created
		-- In nettest.cc
			- TransServer, for the receiving server that will forward a client message 
				to all other servers
			- getTimestamp, which returns the current time for message sending
			- convertDecToBase, convertBaseToDec, used to convert to different bases and back to decimal,
				for shortening message length
V. Testing:

	+ How to test
		- Part 1
		Compile tests with gmake in the test directory
		If you haven't done so beforehand, gmake in network directory
		To run tests, call them in network directory
		
		*NOTE* Make sure that NUM_SERVERS in system.cc is set equal to 1
		*NOTE* Make sure to run "nachos -m 0" to set up the Server before running other clients
		
		To run a simple passport office (2 Customers, 1 of everything else)
		nachos -x ../test/SimpleServerPassport -m 1
		
		To run a full passport office: (In this order on different machines)
		(30 Customers, 5 of each Clerk, 5 of each Senator, 1 Manager)
		nachos -x ../test/10Customers.c -m 1
		nachos -x ../test/10Customers.c -m 2
		nachos -x ../test/10Customers.c -m 3
		nachos -x ../test/5AppPicClerks.c -m 4
		nachos -x ../test/5PassCashClerks.c -m 5
		nachos -x ../test/1ManagerSenators.c -m 6
		
		- Part 2
		Compile tests with gmake in the test directory
		If you haven't done so beforehand, gmake in network directory
		To run tests, call them in network directory
		
		*NOTE* Make sure that "NUM_SERVERS" in system.cc is set equal to 1-5
		*NOTE* Make sure to run "nachos -m X" (X being 0 - 4 depending on servers) to set up the Server before running other clients
		

	+ Test Output
		All our tests output expected results. 

		- SimpleServerPassport execs 2 Customers, 1 of each Clerk, 1 Senator, and 1 Manager. 
			- Runs to completion with 1 Server.
			- Sometimes runs to completion with 2 Servers.
			- Does not run to completion with more than 2.
		- Full Passport Office is run across multiple Nachos machines
			- 10Customers execs 10 Customers
			- 5AppPicClerks execs 5 Application Clerks and 5 Picture Clerks
			- 5PassCashClerks execs 5 Passport Clerks and 5 Cashiers
			- 1ManagerSenators execs 5 Senators and 1 Manager
			
			- Runs to completion with 1 Server.
			- Sometimes runs to completion with 2 Servers.
			- Does not run to completion with more than two.
			
VI. Discussion:

		Mostly for part 1, we had to overhaul our syscalls and server functions to allow for arrays of locks, conditions, and
	monitor variables that share a name, such as appLock[NUM_CLERKS] and picState[NUM_CLERKS] (from previous passport offices).
	Overall, this went as planned, and only required adding an additional struct within the previously created ServerLocks,
	ServerCVs, and ServerMVs. This went as expected.
	
	
		
VII. Miscellaneous:
